/*
 * This file is generated by jOOQ.
*/
package gon.cue.model.ddl.tables;


import gon.cue.model.ddl.Indexes;
import gon.cue.model.ddl.Keys;
import gon.cue.model.ddl.Public;
import gon.cue.model.ddl.tables.records.PermisionsRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Permisions extends TableImpl<PermisionsRecord> {

    private static final long serialVersionUID = -1622743605;

    /**
     * The reference instance of <code>PUBLIC.PERMISIONS</code>
     */
    public static final Permisions PERMISIONS = new Permisions();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PermisionsRecord> getRecordType() {
        return PermisionsRecord.class;
    }

    /**
     * The column <code>PUBLIC.PERMISIONS.ID</code>.
     */
    public final TableField<PermisionsRecord, byte[]> ID = createField("ID", org.jooq.impl.SQLDataType.VARBINARY.nullable(false).identity(true), this, "");

    /**
     * The column <code>PUBLIC.PERMISIONS.PERM</code>.
     */
    public final TableField<PermisionsRecord, String> PERM = createField("PERM", org.jooq.impl.SQLDataType.VARCHAR(2).nullable(false), this, "");

    /**
     * Create a <code>PUBLIC.PERMISIONS</code> table reference
     */
    public Permisions() {
        this(DSL.name("PERMISIONS"), null);
    }

    /**
     * Create an aliased <code>PUBLIC.PERMISIONS</code> table reference
     */
    public Permisions(String alias) {
        this(DSL.name(alias), PERMISIONS);
    }

    /**
     * Create an aliased <code>PUBLIC.PERMISIONS</code> table reference
     */
    public Permisions(Name alias) {
        this(alias, PERMISIONS);
    }

    private Permisions(Name alias, Table<PermisionsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Permisions(Name alias, Table<PermisionsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PRIMARY_KEY_F);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<PermisionsRecord, byte[]> getIdentity() {
        return Keys.IDENTITY_PERMISIONS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<PermisionsRecord> getPrimaryKey() {
        return Keys.PERMISIONS_PK;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<PermisionsRecord>> getKeys() {
        return Arrays.<UniqueKey<PermisionsRecord>>asList(Keys.PERMISIONS_PK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Permisions as(String alias) {
        return new Permisions(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Permisions as(Name alias) {
        return new Permisions(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Permisions rename(String name) {
        return new Permisions(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Permisions rename(Name name) {
        return new Permisions(name, null);
    }
}
