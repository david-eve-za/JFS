/*
 * This file is generated by jOOQ.
*/
package gon.cue.model.ddl.tables.records;


import gon.cue.model.ddl.tables.Permisions;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PermisionsRecord extends UpdatableRecordImpl<PermisionsRecord> implements Record2<byte[], String> {

    private static final long serialVersionUID = -1034271163;

    /**
     * Setter for <code>PUBLIC.PERMISIONS.ID</code>.
     */
    public void setId(byte... value) {
        set(0, value);
    }

    /**
     * Getter for <code>PUBLIC.PERMISIONS.ID</code>.
     */
    public byte[] getId() {
        return (byte[]) get(0);
    }

    /**
     * Setter for <code>PUBLIC.PERMISIONS.PERM</code>.
     */
    public void setPerm(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>PUBLIC.PERMISIONS.PERM</code>.
     */
    public String getPerm() {
        return (String) get(1);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record1<byte[]> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row2<byte[], String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row2<byte[], String> valuesRow() {
        return (Row2) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<byte[]> field1() {
        return Permisions.PERMISIONS.ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field2() {
        return Permisions.PERMISIONS.PERM;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public byte[] component1() {
        return getId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component2() {
        return getPerm();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public byte[] value1() {
        return getId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value2() {
        return getPerm();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PermisionsRecord value1(byte... value) {
        setId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PermisionsRecord value2(String value) {
        setPerm(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PermisionsRecord values(byte[] value1, String value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached PermisionsRecord
     */
    public PermisionsRecord() {
        super(Permisions.PERMISIONS);
    }

    /**
     * Create a detached, initialised PermisionsRecord
     */
    public PermisionsRecord(byte[] id, String perm) {
        super(Permisions.PERMISIONS);

        set(0, id);
        set(1, perm);
    }
}
